// Cloudflare Worker –¥–ª—è Telegram –±–æ—Ç–∞
// –ê–¥–∞–ø—Ç–∞—Ü–∏—è Python –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ Cloudflare Workers

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request))
})

addEventListener('scheduled', event => {
  event.waitUntil(handleScheduled(event))
})

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleRequest(request) {
  const url = new URL(request.url)
  
  // Webhook endpoint –¥–ª—è Telegram
  if (url.pathname === '/webhook' && request.method === 'POST') {
    const update = await request.json()
    await handleTelegramUpdate(update)
    return new Response('OK')
  }
  
  // Health check
  if (url.pathname === '/health') {
    return new Response('Bot is running', { status: 200 })
  }
  
  return new Response('Not Found', { status: 404 })
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
async function handleTelegramUpdate(update) {
  try {
    if (update.message) {
      await handleMessage(update.message)
    } else if (update.callback_query) {
      await handleCallbackQuery(update.callback_query)
    }
  } catch (error) {
    console.error('Error handling update:', error)
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message) {
  const chatId = message.chat.id
  const userId = message.from.id
  const text = message.text
  
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userState = await getUserState(userId)
  
  if (text === '/start') {
    await handleStartCommand(chatId, userId)
  } else if (text === '/new') {
    await handleNewCommand(chatId, userId)
  } else if (text === '/help') {
    await handleHelpCommand(chatId)
  } else if (text === '/last') {
    await handleLastCommand(chatId, userId)
  } else {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await handleFSMInput(chatId, userId, text, userState)
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
async function handleCallbackQuery(callbackQuery) {
  const chatId = callbackQuery.message.chat.id
  const userId = callbackQuery.from.id
  const data = callbackQuery.data
  
  // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
  await answerCallbackQuery(callbackQuery.id)
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö callback'–æ–≤
  if (data === 'new_entry') {
    await startNewEntry(chatId, userId)
  } else if (data === 'time_now') {
    await handleTimeNow(chatId, userId)
  } else if (data === 'confirm_save') {
    await handleConfirmSave(chatId, userId)
  }
  // ... –¥—Ä—É–≥–∏–µ callback'—ã
}

// –ö–æ–º–∞–Ω–¥–∞ /start
async function handleStartCommand(chatId, userId) {
  const user = await getUser(userId)
  
  if (!user) {
    await sendMessage(chatId, 
      "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\\n\\n" +
      "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\\n" +
      "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):"
    )
    await setUserState(userId, 'waiting_registration')
  } else {
    await sendMessage(chatId, 
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>${user.full_name}</b>!`,
      { parse_mode: 'HTML' }
    )
    await sendMainMenu(chatId)
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function sendMainMenu(chatId) {
  const keyboard = {
    inline_keyboard: [
      [{ text: "üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data: "new_entry" }],
      [
        { text: "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏", callback_data: "last_entries" },
        { text: "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data: "edit_last" }
      ],
      [{ text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data: "help" }]
    ]
  }
  
  await sendMessage(chatId, 
    "üöó <b>–ñ—É—Ä–Ω–∞–ª –ø–æ–µ–∑–¥–æ–∫ –∏–Ω–∂–µ–Ω–µ—Ä–∞</b>\\n\\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    { parse_mode: 'HTML', reply_markup: keyboard }
  )
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
async function sendMessage(chatId, text, options = {}) {
  const token = TELEGRAM_BOT_TOKEN
  const url = `https://api.telegram.org/bot${token}/sendMessage`
  
  const payload = {
    chat_id: chatId,
    text: text,
    ...options
  }
  
  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(payload)
  })
  
  return response.json()
}

async function answerCallbackQuery(callbackQueryId, text = '') {
  const token = TELEGRAM_BOT_TOKEN
  const url = `https://api.telegram.org/bot${token}/answerCallbackQuery`
  
  await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      callback_query_id: callbackQueryId,
      text: text
    })
  })
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (KV Storage)
async function getUser(userId) {
  try {
    const userData = await USERS_KV.get(`user_${userId}`)
    return userData ? JSON.parse(userData) : null
  } catch (error) {
    console.error('Error getting user:', error)
    return null
  }
}

async function saveUser(userId, userData) {
  try {
    await USERS_KV.put(`user_${userId}`, JSON.stringify(userData))
  } catch (error) {
    console.error('Error saving user:', error)
  }
}

async function getUserState(userId) {
  try {
    const state = await USERS_KV.get(`state_${userId}`)
    return state ? JSON.parse(state) : null
  } catch (error) {
    return null
  }
}

async function setUserState(userId, state, data = {}) {
  try {
    await USERS_KV.put(`state_${userId}`, JSON.stringify({ state, data }))
  } catch (error) {
    console.error('Error setting user state:', error)
  }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
async function appendToSheet(rowData) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Sheets API —á–µ—Ä–µ–∑ fetch
    const response = await fetch(
      `https://sheets.googleapis.com/v4/spreadsheets/${GOOGLE_SHEET_ID}/values/${GOOGLE_SHEET_NAME}!A1:append?valueInputOption=RAW&insertDataOption=INSERT_ROWS`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${await getGoogleAccessToken()}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          values: [rowData]
        })
      }
    )
    
    return response.ok
  } catch (error) {
    console.error('Error appending to sheet:', error)
    return false
  }
}

async function getGoogleAccessToken() {
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –¥–ª—è –ø–æ–ª–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ JWT —Ç–æ–∫–µ–Ω
  // –í Cloudflare Workers —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ, —á–µ–º –≤ Python
  // –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å-–ø—Ä–æ–∫—Å–∏ –∏–ª–∏ Google Apps Script
  throw new Error('Google Sheets integration requires additional setup in Cloudflare Workers')
}

// Scheduled handler (cron jobs)
async function handleScheduled(event) {
  console.log('Scheduled event triggered:', event.cron)
  // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è ES modules
export default {
  async fetch(request, env, ctx) {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    global.TELEGRAM_BOT_TOKEN = env.TELEGRAM_BOT_TOKEN
    global.GOOGLE_SHEET_ID = env.GOOGLE_SHEET_ID
    global.ADMIN_IDS = env.ADMIN_IDS
    global.USERS_KV = env.USERS_KV
    
    return handleRequest(request)
  },
  
  async scheduled(event, env, ctx) {
    global.TELEGRAM_BOT_TOKEN = env.TELEGRAM_BOT_TOKEN
    global.GOOGLE_SHEET_ID = env.GOOGLE_SHEET_ID
    global.USERS_KV = env.USERS_KV
    
    return handleScheduled(event)
  }
}

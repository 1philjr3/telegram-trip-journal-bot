import asyncio
import logging
import os
from typing import Optional, List
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

from models import TripEntry
from sheets_client import GoogleSheetsClient
from users_repo import UsersRepository
from utils_time import TimeUtils


# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bot = Bot(token=os.getenv("TELEGRAM_APITOKEN"))
dp = Dispatcher(storage=MemoryStorage())

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
users_repo = UsersRepository(
    service_account_path=os.getenv("GOOGLE_SA_JSON_PATH", "./service_account.json"),
    sheet_id=os.getenv("GOOGLE_SHEET_ID"),
    users_sheet_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
)
time_utils = TimeUtils(os.getenv("TIMEZONE", "Europe/Moscow"))
sheets_client = GoogleSheetsClient(
    service_account_path=os.getenv("GOOGLE_SA_JSON_PATH", "./service_account.json"),
    sheet_id=os.getenv("GOOGLE_SHEET_ID"),
    sheet_name=os.getenv("GOOGLE_SHEET_NAME", "–õ–∏—Å—Ç1")
)

# ==== –§–æ—Ç–æ-–ø–æ—Ç–æ–∫: OCR –æ–¥–æ–º–µ—Ç—Ä–∞ –∏ –¥–µ–ª–µ–Ω–∏–π —Ç–æ–ø–ª–∏–≤–∞ ====
# –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
extract_from_image = None
PanelReading = None

def get_env_roi(name: str, default: str) -> tuple:
    val = os.getenv(name, default)
    try:
        x, y, w, h = [int(v.strip()) for v in val.split(',')]
        return (x, y, w, h)
    except Exception:
        return tuple(int(v) for v in default.split(','))

FUEL_BARS = int(os.getenv("FUEL_BARS", "8"))
LITERS_PER_BAR = float(os.getenv("LITERS_PER_BAR", "6.25"))
MIN_CONFIDENCE = float(os.getenv("MIN_CONFIDENCE", "0.6"))

PHOTO_CONFIRM_PREFIX = "confirm_photo"
PHOTO_MANUAL_PREFIX = "manual_photo"
PHOTO_RETAKE_PREFIX = "retake_photo"

def build_photo_confirm_kb(user_id: int, odo: int, bars: int) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –í–µ—Ä–Ω–æ", callback_data=f"{PHOTO_CONFIRM_PREFIX}:{user_id}:{odo}:{bars}")
    kb.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f"{PHOTO_MANUAL_PREFIX}:{user_id}")
    kb.button(text="üì∑ –ü–µ—Ä–µ—Ñ–æ—Ç–æ", callback_data=f"{PHOTO_RETAKE_PREFIX}:{user_id}")
    kb.adjust(1, 2)
    return kb.as_markup()

@dp.message(F.photo)
async def handle_photo(message: Message, state: FSMContext):
    if extract_from_image is None:
        await message.answer("OCR –º–æ–¥—É–ª—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if not users_repo.is_registered(message.from_user.id):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /start")
        return

    try:
        file = await bot.get_file(message.photo[-1].file_id)
        file_bytes = await bot.download_file(file.file_path)
        image_bytes = file_bytes.read()

        reading: PanelReading = await asyncio.to_thread(extract_from_image, image_bytes)

        if reading is None or reading.odometer_km is None or reading.fuel_bars is None:
            await message.answer(
                "–ù–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è. –ú–æ–∂–µ–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥?",
                reply_markup=build_photo_confirm_kb(message.from_user.id, 0, 0)
            )
            return

        liters = round(reading.fuel_bars * LITERS_PER_BAR, 2)

        text = (
            "–ù–∞—à—ë–ª:\n"
            f"‚Ä¢ –ü—Ä–æ–±–µ–≥: <b>{reading.odometer_km}</b> –∫–º\n"
            f"‚Ä¢ –û—Å—Ç–∞—Ç–æ–∫: <b>{reading.fuel_bars}</b> √ó {LITERS_PER_BAR} = <b>{liters}</b> –ª\n\n"
            "–í—Å—ë –≤–µ—Ä–Ω–æ?"
        )

        if reading.confidence < MIN_CONFIDENCE:
            text = "<i>–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.</i>\n" + text

        await message.answer(
            text,
            reply_markup=build_photo_confirm_kb(message.from_user.id, reading.odometer_km, reading.fuel_bars),
            parse_mode="HTML"
        )

        await state.update_data(last_photo_file_id=message.photo[-1].file_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.")


@dp.callback_query(F.data.startswith(PHOTO_CONFIRM_PREFIX + ":"))
async def handle_photo_confirm(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        _, uid, odo, bars = callback.data.split(":")
        odo = int(odo)
        bars = int(bars)
        liters = round(bars * LITERS_PER_BAR, 2)

        data = await state.get_data()
        file_id = data.get("last_photo_file_id")

        ok = await asyncio.to_thread(
            sheets_client.append_measurement,
            callback.from_user.id,
            odo,
            bars,
            liters,
            "photo",
            file_id,
        )
        if ok:
            await callback.message.edit_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–ª. –û–¥–æ–º–µ—Ç—Ä: <b>{odo}</b> –∫–º. –û—Å—Ç–∞—Ç–æ–∫: <b>{liters}</b> –ª.",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")


@dp.callback_query(F.data.startswith(PHOTO_MANUAL_PREFIX + ":"))
async def handle_photo_manual(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –æ–¥–æ–º–µ—Ç—Ä (–∫–º) –∏ —á–∏—Å–ª–æ –¥–µ–ª–µ–Ω–∏–π (0‚Äì8) –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, –Ω–∞–ø—Ä.: 55698 6"
    )
    await state.set_state(PhotoStates.waiting_manual_odo_bars)
    await state.update_data(photo_manual=True)


@dp.message(F.text, StateFilter(PhotoStates.waiting_manual_odo_bars))
async def handle_photo_manual_input(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("photo_manual"):
        return

    try:
        parts = message.text.strip().split()
        odo = int(parts[0])
        bars = int(parts[1])
        if bars < 0 or bars > FUEL_BARS:
            raise ValueError
        liters = round(bars * LITERS_PER_BAR, 2)
        ok = await asyncio.to_thread(
            sheets_client.append_measurement,
            message.from_user.id,
            odo,
            bars,
            liters,
            "manual",
            None,
        )
        if ok:
            await message.answer(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–ª. –û–¥–æ–º–µ—Ç—Ä: <b>{odo}</b> –∫–º. –û—Å—Ç–∞—Ç–æ–∫: <b>{liters}</b> –ª.",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: 55698 6 (–æ–¥–æ–º–µ—Ç—Ä –∏ –¥–µ–ª–µ–Ω–∏—è 0‚Äì8)")
        return
    finally:
        await state.update_data(photo_manual=False)


@dp.callback_query(F.data.startswith(PHOTO_RETAKE_PREFIX + ":"))
async def handle_photo_retake(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–∏–±–æ—Ä–Ω–æ–π –ø–∞–Ω–µ–ª–∏ (–±–µ–∑ –±–ª–∏–∫–æ–≤, –Ω–µ –ø–æ–¥ —É–≥–ª–æ–º).")

# –ê–¥–º–∏–Ω—ã
ADMIN_IDS = [int(x.strip()) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]


class TripStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    waiting_start_time = State()
    waiting_odometer_start = State()
    waiting_end_time = State()
    waiting_odometer_end = State()
    waiting_project = State()
    waiting_address = State()
    waiting_comment = State()
    waiting_confirmation = State()


class EditStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
    waiting_field_choice = State()
    waiting_new_value = State()

class PhotoStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ñ–æ—Ç–æ-–ø–æ—Ç–æ–∫–∞"""
    waiting_manual_odo_bars = State()


async def send_main_menu(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å", callback_data="new_entry")
    keyboard.button(text="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏", callback_data="last_entries")
    keyboard.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é", callback_data="edit_last")
    keyboard.button(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    
    if message.from_user.id in ADMIN_IDS:
        keyboard.button(text="üëë –≠–∫—Å–ø–æ—Ä—Ç (–ê–¥–º–∏–Ω)", callback_data="export")
    
    keyboard.adjust(1, 2, 1, 1)
    
    await message.answer(
        "üöó <b>–ñ—É—Ä–Ω–∞–ª –ø–æ–µ–∑–¥–æ–∫ –∏–Ω–∂–µ–Ω–µ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    
    if not users_repo.is_registered(user_id):
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ):"
        )
        return
    
    user = users_repo.get_user(user_id)
    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{user.full_name}</b>!\n\n"
        f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã —Å {datetime.fromisoformat(user.created_at.replace('Z', '+00:00')).strftime('%d.%m.%Y')}",
        parse_mode="HTML"
    )
    await send_main_menu(message)


@dp.message(F.text, StateFilter(None))
async def handle_registration(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    if users_repo.is_registered(user_id):
        await send_main_menu(message)
        return
    
    full_name = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
    if len(full_name) < 3 or len(full_name.split()) < 2:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º –ò–º—è –§–∞–º–∏–ª–∏—è):"
        )
        return
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users_repo.register_user(user_id, full_name)
    
    await message.answer(
        f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        f"üë§ {full_name}\n"
        f"üÜî –í–∞—à ID: {user_id}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!",
        parse_mode="HTML"
    )
    await send_main_menu(message)


@dp.message(Command("new"))
async def cmd_new_entry(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /new - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    user_id = message.from_user.id
    
    if not users_repo.is_registered(user_id):
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    await start_new_entry(message, state)


@dp.callback_query(F.data == "new_entry")
async def callback_new_entry(callback: CallbackQuery, state: FSMContext):
    """Callback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    await callback.answer()
    await start_new_entry(callback.message, state, edit_message=True)


async def start_new_entry(message: Message, state: FSMContext, edit_message: bool = False):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏"""
    await state.clear()
    await state.set_state(TripStates.waiting_start_time)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è∞ –°–µ–π—á–∞—Å", callback_data="time_now")
    keyboard.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="time_manual")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    keyboard.adjust(2, 1)
    
    text = (
        "üïê <b>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:\n"
        "‚Ä¢ <b>–°–µ–π—á–∞—Å</b> - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ <b>–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é</b> - –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú –∏–ª–∏ –ß–ß:–ú–ú"
    )
    
    if edit_message:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")


@dp.callback_query(F.data == "time_now", StateFilter(TripStates.waiting_start_time))
async def callback_start_time_now(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    await callback.answer()
    
    current_time = time_utils.get_current_datetime()
    await state.update_data(start_time=current_time)
    
    date_str, time_str = time_utils.format_datetime_for_sheets(current_time)
    
    await callback.message.edit_text(
        f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{time_utils.format_datetime_for_display(current_time)}</b>\n\n"
        f"üõ£Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞ –Ω–∞ <b>–Ω–∞—á–∞–ª–æ</b> –ø–æ–µ–∑–¥–∫–∏ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):",
        parse_mode="HTML"
    )
    
    await state.set_state(TripStates.waiting_odometer_start)


@dp.callback_query(F.data == "time_manual", StateFilter(TripStates.waiting_start_time))
async def callback_start_time_manual(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    await callback.answer()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "üïê <b>–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "‚Ä¢ <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 21.09.2024 14:30)\n"
        "‚Ä¢ <code>–ß–ß:–ú–ú</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30) - –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã\n"
        "‚Ä¢ <code>—Å–µ–π—á–∞—Å</code> - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )


@dp.message(F.text, StateFilter(TripStates.waiting_start_time))
async def handle_start_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞"""
    start_time = time_utils.parse_datetime_input(message.text)
    
    if start_time is None:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n"
            "‚Ä¢ <code>–ß–ß:–ú–ú</code>\n"
            "‚Ä¢ <code>—Å–µ–π—á–∞—Å</code>",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(start_time=start_time)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{time_utils.format_datetime_for_display(start_time)}</b>\n\n"
        f"üõ£Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞ –Ω–∞ <b>–Ω–∞—á–∞–ª–æ</b> –ø–æ–µ–∑–¥–∫–∏ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(TripStates.waiting_odometer_start)


@dp.message(F.text, StateFilter(TripStates.waiting_odometer_start))
async def handle_odometer_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–¥–æ–º–µ—Ç—Ä–∞"""
    try:
        odometer_start = int(message.text.strip())
        if odometer_start < 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
            
        await state.update_data(odometer_start=odometer_start)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚è∞ –°–µ–π—á–∞—Å", callback_data="end_time_now")
        keyboard.button(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="end_time_manual")
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        keyboard.adjust(2, 1)
        
        await message.answer(
            f"‚úÖ –û–¥–æ–º–µ—Ç—Ä –Ω–∞—á–∞–ª–∞: <b>{odometer_start:,} –∫–º</b>\n\n"
            f"üïê <b>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        
        await state.set_state(TripStates.waiting_end_time)
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):"
        )


@dp.callback_query(F.data == "end_time_now", StateFilter(TripStates.waiting_end_time))
async def callback_end_time_now(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    await callback.answer()
    
    current_time = time_utils.get_current_datetime()
    data = await state.get_data()
    start_time = data['start_time']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
    if not time_utils.validate_time_sequence(start_time, current_time):
        await callback.message.edit_text(
            "‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞.",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(end_time=current_time)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{time_utils.format_datetime_for_display(current_time)}</b>\n"
        f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{time_utils.format_duration(start_time, current_time)}</b>\n\n"
        f"üõ£Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞ –Ω–∞ <b>–∫–æ–Ω–µ—Ü</b> –ø–æ–µ–∑–¥–∫–∏ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(TripStates.waiting_odometer_end)


@dp.callback_query(F.data == "end_time_manual", StateFilter(TripStates.waiting_end_time))
async def callback_end_time_manual(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    await callback.answer()
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        "üïê <b>–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
        "‚Ä¢ <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 21.09.2024 16:30)\n"
        "‚Ä¢ <code>–ß–ß:–ú–ú</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16:30) - –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã\n"
        "‚Ä¢ <code>—Å–µ–π—á–∞—Å</code> - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )


@dp.message(F.text, StateFilter(TripStates.waiting_end_time))
async def handle_end_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    end_time = time_utils.parse_datetime_input(message.text)
    
    if end_time is None:
        await message.answer(
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>\n"
            "‚Ä¢ <code>–ß–ß:–ú–ú</code>\n"
            "‚Ä¢ <code>—Å–µ–π—á–∞—Å</code>",
            parse_mode="HTML"
        )
        return
    
    data = await state.get_data()
    start_time = data['start_time']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
    if not time_utils.validate_time_sequence(start_time, end_time):
        await message.answer(
            "‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞!\n\n"
            f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: <b>{time_utils.format_datetime_for_display(start_time)}</b>\n"
            f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{time_utils.format_datetime_for_display(end_time)}</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(end_time=end_time)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await message.answer(
        f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{time_utils.format_datetime_for_display(end_time)}</b>\n"
        f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{time_utils.format_duration(start_time, end_time)}</b>\n\n"
        f"üõ£Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞ –Ω–∞ <b>–∫–æ–Ω–µ—Ü</b> –ø–æ–µ–∑–¥–∫–∏ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö):",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(TripStates.waiting_odometer_end)


@dp.message(F.text, StateFilter(TripStates.waiting_odometer_end))
async def handle_odometer_end(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–Ω–µ—á–Ω–æ–≥–æ –æ–¥–æ–º–µ—Ç—Ä–∞"""
    try:
        odometer_end = int(message.text.strip())
        if odometer_end < 0:
            raise ValueError("–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
        
        data = await state.get_data()
        odometer_start = data['odometer_start']
        
        if odometer_end < odometer_start:
            await message.answer(
                f"‚ùå –ö–æ–Ω–µ—á–Ω—ã–π –æ–¥–æ–º–µ—Ç—Ä ({odometer_end:,} –∫–º) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ ({odometer_start:,} –∫–º)!\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
            )
            return
        
        await state.update_data(odometer_end=odometer_end)
        
        distance_km = odometer_end - odometer_start
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_project")
        keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        keyboard.adjust(1, 1)
        
        await message.answer(
            f"‚úÖ –û–¥–æ–º–µ—Ç—Ä –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{odometer_end:,} –∫–º</b>\n"
            f"üìè –ü—Ä–æ–±–µ–≥: <b>{distance_km:,} –∫–º</b>\n\n"
            f"üèóÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
            reply_markup=keyboard.as_markup(),
            parse_mode="HTML"
        )
        
        await state.set_state(TripStates.waiting_project)
        
    except ValueError:
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤ (—Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):"
        )


@dp.callback_query(F.data == "skip_project", StateFilter(TripStates.waiting_project))
async def callback_skip_project(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    await callback.answer()
    await state.update_data(project="")
    await ask_address(callback.message, state, edit_message=True)


@dp.message(F.text, StateFilter(TripStates.waiting_project))
async def handle_project(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    project = message.text.strip()
    await state.update_data(project=project)
    await ask_address(message, state)


async def ask_address(message: Message, state: FSMContext, edit_message: bool = False):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_address")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    keyboard.adjust(1, 1)
    
    text = "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):"
    
    if edit_message:
        await message.edit_text(text, reply_markup=keyboard.as_markup())
    else:
        await message.answer(text, reply_markup=keyboard.as_markup())
    
    await state.set_state(TripStates.waiting_address)


@dp.callback_query(F.data == "skip_address", StateFilter(TripStates.waiting_address))
async def callback_skip_address(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –ø–æ–ª—è –∞–¥—Ä–µ—Å–∞"""
    await callback.answer()
    await state.update_data(address="")
    await ask_comment(callback.message, state, edit_message=True)


@dp.message(F.text, StateFilter(TripStates.waiting_address))
async def handle_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞"""
    address = message.text.strip()
    await state.update_data(address=address)
    await ask_comment(message, state)


async def ask_comment(message: Message, state: FSMContext, edit_message: bool = False):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    text = (
        "üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ.\n"
        "–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –ø–∏—Å—å–º–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
    )
    
    if edit_message:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    
    await state.set_state(TripStates.waiting_comment)


@dp.message(F.text, StateFilter(TripStates.waiting_comment))
async def handle_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    comment = message.text.strip()
    await state.update_data(comment=comment)
    await show_confirmation(message, state)


async def show_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    user = users_repo.get_user(message.from_user.id)
    
    start_time = data['start_time']
    end_time = data['end_time']
    odometer_start = data['odometer_start']
    odometer_end = data['odometer_end']
    distance_km = odometer_end - odometer_start
    project = data.get('project', '')
    address = data.get('address', '')
    comment = data['comment']
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    start_display = time_utils.format_datetime_for_display(start_time)
    end_display = time_utils.format_datetime_for_display(end_time)
    duration = time_utils.format_duration(start_time, end_time)
    
    confirmation_text = (
        "üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏</b>\n\n"
        f"üë§ <b>–ò–Ω–∂–µ–Ω–µ—Ä:</b> {user.full_name}\n"
        f"üïê <b>–ù–∞—á–∞–ª–æ:</b> {start_display}\n"
        f"üïë <b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_display}\n"
        f"‚è±Ô∏è <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration}\n"
        f"üõ£Ô∏è <b>–û–¥–æ–º–µ—Ç—Ä –Ω–∞—á–∞–ª–æ:</b> {odometer_start:,} –∫–º\n"
        f"üõ£Ô∏è <b>–û–¥–æ–º–µ—Ç—Ä –æ–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {odometer_end:,} –∫–º\n"
        f"üìè <b>–ü—Ä–æ–±–µ–≥:</b> {distance_km:,} –∫–º\n"
    )
    
    if project:
        confirmation_text += f"üèóÔ∏è <b>–ü—Ä–æ–µ–∫—Ç:</b> {project}\n"
    
    if address:
        confirmation_text += f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
    
    if comment:
        confirmation_text += f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment[:100]}{'...' if len(comment) > 100 else ''}\n"
    
    confirmation_text += "\n<i>–í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã?</i>"
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="confirm_save")
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    keyboard.adjust(1, 2)
    
    await message.answer(
        confirmation_text,
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(TripStates.waiting_confirmation)


@dp.callback_query(F.data == "confirm_save", StateFilter(TripStates.waiting_confirmation))
async def callback_confirm_save(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets"""
    await callback.answer()
    
    data = await state.get_data()
    user = users_repo.get_user(callback.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∑–∞–ø–∏—Å–∏
    start_time = data['start_time']
    end_time = data['end_time']
    start_date, start_time_str = time_utils.format_datetime_for_sheets(start_time)
    end_date, end_time_str = time_utils.format_datetime_for_sheets(end_time)
    
    trip_entry = TripEntry(
        date=start_date,
        time_start=start_time_str,
        time_end=end_time_str,
        odometer_start=data['odometer_start'],
        odometer_end=data['odometer_end'],
        distance_km=data['odometer_end'] - data['odometer_start'],
        engineer=user.full_name,
        project=data.get('project', ''),
        address=data.get('address', ''),
        comment=data['comment'],
        created_at=time_utils.get_utc_iso_string(),
        author_tg_id=callback.from_user.id
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Google Sheets
    try:
        success = sheets_client.append_row(trip_entry)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üìè –ü—Ä–æ–±–µ–≥: <b>{trip_entry.distance_km:,} –∫–º</b>\n"
                f"üïê {time_utils.format_datetime_for_display(start_time)} - "
                f"{time_utils.format_datetime_for_display(end_time)}\n\n"
                f"–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets.",
                parse_mode="HTML"
            )
            
            await state.clear()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            await asyncio.sleep(3)
            await send_main_menu(callback.message)
            
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –¥—É–±–ª–∏—Ä—É—é—â–∞—è –∑–∞–ø–∏—Å—å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ Google Sheets.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )


@dp.message(Command("last"))
async def cmd_last_entries(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
    await show_last_entries(message)


@dp.callback_query(F.data == "last_entries")
async def callback_last_entries(callback: CallbackQuery):
    """Callback –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
    await callback.answer()
    await show_last_entries(callback.message, edit_message=True)


async def show_last_entries(message: Message, edit_message: bool = False, limit: int = 5):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""
    try:
        last_rows = sheets_client.get_last_rows(limit)
        
        if not last_rows:
            text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏</b>\n\n–ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            text = f"üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(last_rows)} –∑–∞–ø–∏—Å–µ–π</b>\n\n"
            
            for i, row in enumerate(last_rows, 1):
                engineer = row.get('engineer', '–ù–µ —É–∫–∞–∑–∞–Ω')
                date = row.get('date', '')
                time_start = row.get('time_start', '')
                time_end = row.get('time_end', '')
                distance_km = row.get('distance_km', '0')
                project = row.get('project', '')
                address = row.get('address', '')
                
                text += f"<b>{i}. {engineer}</b>\n"
                text += f"üìÖ {date} | ‚è±Ô∏è {time_start}-{time_end}\n"
                text += f"üìè {distance_km} –∫–º"
                
                if project:
                    text += f" | üèóÔ∏è {project[:20]}{'...' if len(project) > 20 else ''}"
                
                if address:
                    text += f" | üìç {address[:20]}{'...' if len(address) > 20 else ''}"
                
                text += "\n\n"
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="last_entries")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1, 1)
        
        if edit_message:
            await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets."
        
        if edit_message:
            await message.edit_text(error_text)
        else:
            await message.answer(error_text)


@dp.message(Command("edit_last"))
async def cmd_edit_last(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏"""
    await start_edit_last_entry(message, state)


@dp.callback_query(F.data == "edit_last")
async def callback_edit_last(callback: CallbackQuery, state: FSMContext):
    """Callback –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏"""
    await callback.answer()
    await start_edit_last_entry(callback.message, state, edit_message=True)


async def start_edit_last_entry(message: Message, state: FSMContext, edit_message: bool = False):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_entry = sheets_client.get_last_user_entry(user_id)
    
    if not last_entry:
        text = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."
        
        if edit_message:
            await message.edit_text(text)
        else:
            await message.answer(text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –µ—â–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (15 –º–∏–Ω—É—Ç)
    created_at = last_entry.get('created_at', '')
    if not time_utils.is_within_edit_time_limit(created_at, 15):
        text = (
            "‚ùå <b>–í—Ä–µ–º—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ!</b>\n\n"
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å–∏ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è."
        )
        
        if edit_message:
            await message.edit_text(text, parse_mode="HTML")
        else:
            await message.answer(text, parse_mode="HTML")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(edit_entry=last_entry)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    engineer = last_entry.get('engineer', '')
    date = last_entry.get('date', '')
    time_start = last_entry.get('time_start', '')
    time_end = last_entry.get('time_end', '')
    distance_km = last_entry.get('distance_km', '0')
    project = last_entry.get('project', '')
    address = last_entry.get('address', '')
    comment = last_entry.get('comment', '')
    
    text = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏</b>\n\n"
        f"üë§ <b>–ò–Ω–∂–µ–Ω–µ—Ä:</b> {engineer}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {date}\n"
        f"üïê <b>–í—Ä–µ–º—è:</b> {time_start} - {time_end}\n"
        f"üìè <b>–ü—Ä–æ–±–µ–≥:</b> {distance_km} –∫–º\n"
        f"üèóÔ∏è <b>–ü—Ä–æ–µ–∫—Ç:</b> {project or '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address or '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}\n"
        f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment[:50]}{'...' if len(comment) > 50 else ''}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?"
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üèóÔ∏è –ü—Ä–æ–µ–∫—Ç", callback_data="edit_project")
    keyboard.button(text="üìç –ê–¥—Ä–µ—Å", callback_data="edit_address")
    keyboard.button(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="edit_comment")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    keyboard.adjust(2, 1, 1)
    
    if edit_message:
        await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    
    await state.set_state(EditStates.waiting_field_choice)


@dp.callback_query(F.data.startswith("edit_"), StateFilter(EditStates.waiting_field_choice))
async def handle_edit_field_choice(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()
    
    field = callback.data.replace("edit_", "")
    await state.update_data(edit_field=field)
    
    field_names = {
        "project": "üèóÔ∏è –ü—Ä–æ–µ–∫—Ç",
        "address": "üìç –ê–¥—Ä–µ—Å",
        "comment": "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
    }
    
    field_name = field_names.get(field, field)
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è: {field_name}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(EditStates.waiting_new_value)


@dp.message(F.text, StateFilter(EditStates.waiting_new_value))
async def handle_edit_new_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
    data = await state.get_data()
    field = data['edit_field']
    new_value = message.text.strip()
    edit_entry = data['edit_entry']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è
    edit_entry[field] = new_value
    
    # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –≤ Google Sheets –ø–æ row_uid
    row_uid = edit_entry.get('row_uid')
    if not row_uid:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return
    
    row_info = sheets_client.find_row_by_uid(row_uid, message.from_user.id)
    
    if not row_info:
        await message.answer("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ—ë —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.")
        await state.clear()
        return
    
    row_number, row_data = row_info
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç TripEntry —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    user = users_repo.get_user(message.from_user.id)
    
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ sheets
        start_dt = time_utils.parse_sheets_datetime(edit_entry['date'], edit_entry['time_start'])
        end_dt = time_utils.parse_sheets_datetime(edit_entry['date'], edit_entry['time_end'])
        
        if not start_dt or not end_dt:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.")
            await state.clear()
            return
        
        updated_entry = TripEntry(
            date=edit_entry['date'],
            time_start=edit_entry['time_start'],
            time_end=edit_entry['time_end'],
            odometer_start=int(edit_entry['odometer_start']),
            odometer_end=int(edit_entry['odometer_end']),
            distance_km=int(edit_entry['distance_km']),
            engineer=user.full_name,
            project=edit_entry.get('project', ''),
            address=edit_entry.get('address', ''),
            comment=edit_entry.get('comment', ''),
            created_at=edit_entry['created_at'],
            author_tg_id=message.from_user.id,
            row_uid=row_uid
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ Google Sheets
        success = sheets_client.update_row(row_number, updated_entry)
        
        if success:
            field_names = {
                "project": "üèóÔ∏è –ü—Ä–æ–µ–∫—Ç",
                "address": "üìç –ê–¥—Ä–µ—Å",
                "comment": "üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
            }
            
            await message.answer(
                f"‚úÖ <b>–ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
                f"{field_names.get(field, field)} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:\n"
                f"<code>{new_value}</code>",
                parse_mode="HTML"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
    
    await state.clear()


@dp.message(Command("export"))
async def cmd_export(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await show_export_info(message)


@dp.callback_query(F.data == "export")
async def callback_export(callback: CallbackQuery):
    """Callback —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await callback.answer()
    await show_export_info(callback.message, edit_message=True)


async def show_export_info(message: Message, edit_message: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        last_rows = sheets_client.get_last_rows(10)
        total_users = users_repo.get_all_users_count()
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–±–ª–∏—Ü—É
        sheet_url = f"https://docs.google.com/spreadsheets/d/{os.getenv('GOOGLE_SHEET_ID')}/edit"
        
        text = (
            f"üëë <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üìù –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ: {len(last_rows)}\n\n"
            f"üîó <a href='{sheet_url}'>–û—Ç–∫—Ä—ã—Ç—å Google Sheets</a>\n\n"
            f"<i>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏'</i>"
        )
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏", callback_data="last_entries")
        keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        keyboard.adjust(1, 1)
        
        if edit_message:
            await message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö."
        
        if edit_message:
            await message.edit_text(error_text)
        else:
            await message.answer(error_text)


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    await show_help(message)


@dp.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery):
    """Callback –ø–æ–º–æ—â–∏"""
    await callback.answer()
    await show_help(callback.message, edit_message=True)


async def show_help(message: Message, edit_message: bool = False):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/new - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–æ–µ–∑–¥–∫–∏\n"
        "/last - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏\n"
        "/edit_last - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:</b>\n"
        "1. –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Å–µ–π—á–∞—Å/—Ä—É—á–Ω–æ–π –≤–≤–æ–¥)\n"
        "2. –ü–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞ –Ω–∞—á–∞–ª–∞\n"
        "3. –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
        "4. –ü–æ–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–º–µ—Ç—Ä–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è\n"
        "5. –ü—Ä–æ–µ–∫—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "6. –ê–¥—Ä–µ—Å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        "7. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n"
        "8. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ\n\n"
        "<b>–§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:</b>\n"
        "‚Ä¢ <code>—Å–µ–π—á–∞—Å</code> - —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ <code>14:30</code> - –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è\n"
        "‚Ä¢ <code>21.09.2024 14:30</code> - –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞\n\n"
        "<b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>\n"
        "–ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç, –∞–¥—Ä–µ—Å –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏."
    )
    
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    
    if edit_message:
        await message.edit_text(help_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    else:
        await message.answer(help_text, reply_markup=keyboard.as_markup(), parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@dp.callback_query(F.data == "cancel")
async def callback_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await asyncio.sleep(1)
    await send_main_menu(callback.message)


@dp.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    await state.clear()
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await send_main_menu(callback.message)


@dp.callback_query(F.data == "go_back")
async def callback_go_back(callback: CallbackQuery, state: FSMContext):
    """–ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"""
    await callback.answer()
    await callback.message.edit_text("üîô –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é...")
    await ask_comment(callback.message, state, edit_message=True)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    required_env_vars = ["TELEGRAM_APITOKEN", "GOOGLE_SHEET_ID"]
    missing_vars = [var for var in required_env_vars if not os.getenv(var)]
    
    if missing_vars:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        return
    
    service_account_path = os.getenv("GOOGLE_SA_JSON_PATH", "./service_account.json")
    if not os.path.exists(service_account_path):
        logger.error(f"–§–∞–π–ª —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {service_account_path}")
        return
    
    logger.info("–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º polling...")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()


if __name__ == "__main__":
    asyncio.run(main())
